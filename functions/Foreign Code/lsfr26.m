function varargout = lsfr26(varargin)
% LSFR is a Least Squares Fit Routine with a graphical user
% interface. LSFR.M invokes the GUI.
% For further information, read the User's Manual
%
% LSFR is designed to run on MATLAB v6.0 (Release 12) and above. It will
% not run on MATLAB version 5 or lower.
% In addition, the ability to save plotted figures to a file is only available
% in MATLAB v6.5 (Release 13) and above. All other functionality is still
% available in Release 12.

% Any error messages produced by MATLAB are caught within LSFR and displayed in
% a dialog box, rather than MATLAB terminating execution and displaying the message
% in the command window. Warning messages are still displayed in the command window,
% but these do not interrupt execution.

% All GUI code (c)Jordan Hulme 2003
% Analysis code (c)Adam Petrus & Jordan Hulme 2003
% Project Supervisor: Ian Duerdoth
% Fixed by ajmk October 2015 for MATLAB versions 2014b and above

% BETA VERSION

% Error scaling corrected Paddy Leahy October 2008

if nargin == 0  % LAUNCH GUI
    
    fig = openfig(mfilename,'new');
    
    % Use system color scheme for figure:
    set(fig,'Color',get(0,'defaultUicontrolBackgroundColor'));
    
    % Generate a structure of handles to pass to callbacks 
    handles = guihandles(fig);
    handles.lsfrver = 'BETA 2.6';
    addpath(pwd) % Keeps LuSiFeR on the MATLAB search path list
    
    % Check MATLAB compatibility - Save function will not work in v6.0
    % Older versions (i.e. v5 and lower) will not run LSFR at all.
    matver = version;
    if (str2num(matver(3)) < 5)
        handles.disablesave = 1;
    else handles.disablesave = 0;
    end
    handles.xmin = [handles.edit_xmin
        handles.text_xmin]; % this saves a few lines of code...
    handles.xmax = [handles.edit_xmax
        handles.text_xmax];
    handles.ymin = [handles.edit_ymin
        handles.text_ymin];
    handles.ymax = [handles.edit_ymax
        handles.text_ymax];
    % Store handles structure
    guidata(fig, handles);
    
    if nargout > 0
        varargout{1} = fig;
    end
    
elseif ischar(varargin{1}) % INVOKE NAMED SUBFUNCTION OR CALLBACK
    
    try
        [varargout{1:nargout}] = feval(varargin{:}); % FEVAL switchyard
    catch
        disp(lasterr);
    end
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MAIN GUI
% All uicontrols that can recieve focus are created in a certain
% order to produce a logical tab-focus ordering at runtime. Other
% uicontrols (frames, captions) cannot recieve focus so require no
% special ordering.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Create and return a handle to the GUI figure. 
function h1 = openfig(filename, policy)

% Prevent multiple instances
oldmain = findall(0,'Tag','lsfrmain');
oldfigs = findall(0,'Tag','lsfrfig');
oldhelp = findall(0,'Tag','lsfrhelp');
%if oldmain delete(oldmain); end;
%if oldfigs delete(oldfigs); end;
%if oldhelp delete(oldhelp); end;

% Create the GUI
scrsz = get(0,'ScreenSize'); % used to centre the GUI onscreen

%%%%%%%%%%%%% MAIN GUI %%%%%%%%%%%%% ----------------------- [ 1     ]
h1 = figure(... % Main GUI window
    'PaperUnits',get(0,'defaultfigurePaperUnits'),...
    'CloseRequestFcn',[mfilename '(''lsfrexit'')'],...
    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
    'IntegerHandle','off',...
    'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
    'MenuBar','none',...
    'Name','LSFR for MATLAB',...
    'NumberTitle','off',...
    'PaperPosition',get(0,'defaultfigurePaperPosition'),...
    'PaperSize',[20.98404194812 29.67743169791],...
    'PaperType',get(0,'defaultfigurePaperType'),...
    'Position',[(scrsz(3)-580)/2 (scrsz(4)-460)/2 580 460],...
    'HandleVisibility','on',...
    'Tag','lsfrmain');
set(h1,'Resize','off'); % this must done separately due to a quirk in MATLAB 6.0

%%%%%%%%%% FRAMES %%%%%%%%%%%%%%%%%% ----------------------- [ 2 -  6]
h2 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[10 200 560 250],...
    'Style','frame',...
    'Tag','frame_plotoptions');

h3 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[350 250 200 180],...
    'Style','frame',...
    'Tag','frame_limits');

h4 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[350 250 200 90],...
    'String',{ '' },...
    'Style','frame',...
    'Tag','frame_limits2');

h5 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[10 70 280 120],...
    'Style','frame',...
    'Tag','frame_dataoptions');

h6 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[300 10 270 180],...
    'Style','frame',...
    'Tag','frame_preview');

%%%%%%%%%% PLOT OPTIONS %%%%%%%%%%%% ----------------------- [ 7 - 36]
h7 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[15 442 60 15],...
    'String','Plot Options',...
    'Style','text',...
    'Tag','text_plotoptions');

h8 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[20 400 75 15],...
    'String','Fit type:',...
    'Style','text',...
    'Tag','text_type');

h9 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'BackgroundColor',[1 1 1],...
    'Enable','off',...
    'Position',[100 400 200 20],...
    'String',{ 'Linear through origin (y=mx)' 'Linear (y=mx+c)' 'Quadratic (y=ax^2+bx+c)' 'Cubic (y=ax^3+bx^2+cx+d)'},...
    'Style','popupmenu',...
    'Value',2,...
    'TooltipString','Select the type of fit required',...
    'Tag','popupmenu_type');

h10 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[20 340 75 15],...
    'String','Plot title:',...
    'Style','text',...
    'Tag','text_plottitle');

h11 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'BackgroundColor',[1 1 1],...
    'Enable','off',...
    'HorizontalAlignment','left',...
    'Position',[100 340 200 20],...
    'String','Plot of my data',...
    'Style','edit',...
    'Tag','edit_title');

h12 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[20 320 75 15],...
    'String','X-axis label:',...
    'Style','text',...
    'Tag','text_xlabel');

h13 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'BackgroundColor',[1 1 1],...
    'Enable','off',...
    'HorizontalAlignment','left',...
    'Position',[100 320 200 20],...
    'String','Abscissa',...
    'Style','edit',...
    'Tag','edit_xlabel');

h14 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[20 300 75 15],...
    'String','Y-axis label:',...
    'Style','text',...
    'Tag','text_ylabel');

h15 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'BackgroundColor',[1 1 1],...
    'Enable','off',...
    'HorizontalAlignment','left',...
    'Position',[100 300 200 20],...
    'String','Ordinate',...
    'Style','edit',...
    'Tag','edit_ylabel');

h16 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'Position',[100 270 160 20],...
    'String','Show gridlines',...
    'Style','checkbox',...
    'Value',1,...
    'TooltipString','Show gridlines on the graph',...
    'Tag','checkbox_gridlines');

h17 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'Position',[100 250 160 20],...
    'String','Show deviations subplot',...
    'Style','checkbox',...
    'Value',1,...
    'TooltipString','Show deviations from the fitted line on the plot window',...
    'Tag','checkbox_deviations');

h18 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'Position',[100 230 160 20],...
    'String','Show fitted parameters',...
    'Style','checkbox',...
    'Value',1,...
    'TooltipString','Display fitted parameters on the plot window',...
    'Tag','checkbox_parameters');

h19 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'Position',[355 423 55 15],...
    'String','Axis Limits',...
    'Style','text',...
    'Tag','text_limits');

h20 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'FontWeight','bold',...
    'Position',[360 400 20 20],...
    'String','X:',...
    'Style','text',...
    'Tag','text_x');

h21 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[385 395 30 20],...
    'String','Min',...
    'Style','text',...
    'Tag','text_xmin');

h22 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'BackgroundColor',[1 1 1],...
    'Callback',[mfilename '(''edit_limit_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'HorizontalAlignment','left',...
    'Position',[420 400 50 20],...
    'String','Auto',...
    'Style','edit',...
    'Tag','edit_xmin');

h23 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''checkbox_xmin_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'Position',[475 400 70 20],...
    'String','Automatic',...
    'Style','checkbox',...
    'Value',1,...
    'Tag','checkbox_xmin');

h24 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[385 375 30 20],...
    'String','Max',...
    'Style','text',...
    'Tag','text_xmax');

h25 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''edit_limit_Callback'',gcbo,[],guidata(gcbo))'],...
    'BackgroundColor',[1 1 1],...
    'Enable','off',...
    'HorizontalAlignment','left',...
    'Position',[420 380 50 20],...
    'String','Auto',...
    'Style','edit',...
    'Tag','edit_xmax');

h26 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''checkbox_xmax_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'Position',[475 380 70 20],...
    'String','Automatic',...
    'Style','checkbox',...
    'Value',1,...
    'Tag','checkbox_xmax');

h27 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''pushbutton_origin_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'Position',[410 350 80 20],...
    'String','Show origin',...
    'Style','pushbutton',...
    'TooltipString','Force x-axis limits to include origin',...
    'Tag','pushbutton_originx');

h28 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'FontWeight','bold',...
    'Position',[360 310 20 20],...
    'String','Y:',...
    'Style','text',...
    'Tag','text_y');

h29 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[385 305 30 20],...
    'String','Min',...
    'Style','text',...
    'Tag','text_ymin');

h29 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'BackgroundColor',[1 1 1],...
    'Callback',[mfilename '(''edit_limit_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'HorizontalAlignment','left',...
    'Position',[420 310 50 20],...
    'String','Auto',...
    'Style','edit',...
    'Tag','edit_ymin');

h31 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename  '(''checkbox_ymin_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'Position',[475 310 70 20],...
    'String','Automatic',...
    'Style','checkbox',...
    'Value',1,...
    'Tag','checkbox_ymin'); 

h32 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Enable','off',...
    'HorizontalAlignment','right',...
    'Position',[385 285 30 20],...
    'String','Max',...
    'Style','text',...
    'Tag','text_ymax');

h33 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'BackgroundColor',[1 1 1],...
    'Callback',[mfilename '(''edit_limit_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'HorizontalAlignment','left',...
    'Position',[420 290 50 20],...
    'String','Auto',...
    'Style','edit',...
    'Tag','edit_ymax');

h34 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''checkbox_ymax_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'Position',[475 290 70 20],...
    'String','Automatic',...
    'Style','checkbox',...
    'Value',1,...
    'Tag','checkbox_ymax');

h35 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''pushbutton_origin_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'Position',[410 260 80 20],...
    'String','Show origin',...
    'Style','pushbutton',...
    'TooltipString','Force y-axis limits to include origin',...
    'Tag','pushbutton_originy');

h36 = uicontrol(...
    'Parent',h1,...
    'Enable','off',...
    'Units','pixels',...
    'Style','pushbutton',...
    'Position',[390 215 160 20],...
    'String','Clear figure windows',...
    'Tag','pushbutton_clearfigs',...
    'TooltipString','Close all open figure windows',...
    'Callback',[mfilename '(''lsfrclr'')']);

%%%%%%%%%% DATA OPTIONS %%%%%%%%%%%% ----------------------- [37 - 44]
h37 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[15 182 65 15],...
    'String','Data Options',...
    'Style','text',...
    'Tag','text_dataoptions');

h38 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'HorizontalAlignment','left',...
    'Position',[25 160 100 15],...
    'String','Working directory:',...
    'Style','text',...
    'Tag','text_workdir');

h39 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'HorizontalAlignment','left',...
    'Position',[120 160 150 15],...
    'String',pwd,...
    'Style','text',...
    'Tag','text_path');

h40 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'HorizontalAlignment','left',...
    'Position',[25 140 100 15],...
    'String','Data from file:',...
    'Style','text',...
    'Tag','text_datafile');

h41 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'HorizontalAlignment','left',...
    'Position',[95 140 150 15],...
    'String','(no file loaded)',...
    'Style','text',...
    'Tag','text_filename');

h42 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'HorizontalAlignment','left',...
    'Position',[25 120 150 15],...
    'String','Number of data points:',...
    'Style','text',...
    'Tag','text_datapoints');

h43 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'HorizontalAlignment','left',...
    'Position',[140 120 50 15],...
    'String','0',...
    'Style','text',...
    'Tag','text_points');

h44 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''pushbutton_newdata_Callback'',gcbo,[],guidata(gcbo))'],...
    'FontWeight','bold',...
    'Position',[30 90 240 20],...
    'String','Load new data...',...
    'TooltipString','Select and load a data file',...
    'Tag','pushbutton_newdata');

%%%%%%%%%% FILE PREVIEW %%%%%%%%%%%% ----------------------- [45 - 46]
h45 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Position',[305 182 65 15],...
    'String','File Preview',...
    'Style','text',...
    'Tag','text_filepreview');

h46 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'FontName','FixedWidth',...
    'ForegroundColor',[0.5 0.5 0.5],...
    'HorizontalAlignment','left',...
    'Position',[310 20 250 160],...
    'String','(no file loaded)',...
    'Style','text',...
    'Tag','text_previewpane');

%%%%% MAIN BUTTONS & MENU ITEMS %%%% ----------------------- [47 - 50]
h47 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''pushbutton_exit_Callback'',gcbo,[],guidata(gcbo))'],...
    'Position',[20 30 60 20],...
    'String','Exit',...
    'TooltipString','Exit LSFR',...
    'Tag','pushbutton_exit');

h48 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''pushbutton_plot_Callback'',gcbo,[],guidata(gcbo))'],...
    'Enable','off',...
    'FontSize',12,...
    'FontWeight','bold',...
    'Position',[100 15 100 40],...
    'String','Plot!',...
    'TooltipString','Plot graph with the current data and options',...
    'Tag','pushbutton_plot');

h49 = uicontrol(...
    'Parent',h1,...
    'Units','pixels',...
    'Callback',[mfilename '(''lsfrhelp'',guidata(gcf),''main'')'],...
    'Position',[220 30 60 20],...
    'String','Help',...
    'TooltipString','Display the help window',...
    'Tag','pushbutton_help');

h50 = uimenu(...
    'Parent',h1,...
    'Label','About LSFR',...
    'Callback',[mfilename '(''lsfrinfo'',guidata(gcf))'],...
    'Tag','menu_about');

% --------------------------------------------------------------------
% CALLBACKS
%
% The following functions are Callbacks for the uicontrols on the
% LSFR Main Menu. The name of each Callback contains the name
% of the uicontrol it represents; ie. pushbutton_resetplot_Callback
% corresponds to the uicontrol pushbutton_resetplot

% --------------------------------------------------------------------
function varargout = pushbutton_newdata_Callback(h, eventdata, handles, varargin)
% load data & set up errpr values
try
    handles.data = lsfrload(handles);
catch
    return;
end
guidata(gcbf, handles); % update handles structure

% initialise and enable GUI objects
everything = struct2cell(handles);
for n=2:length(everything)-7
    if ishandle(everything{n,1})
        set(everything{n,1},'enable','on');
    end
end
defaults(handles); % initialise plot options
autolimits(handles); % initialise axis limits

% --------------------------------------------------------------------
function varargout = pushbutton_plot_Callback(h, eventdata, handles, varargin)

if str2double(get(handles.text_points,'String')) % check a file is loaded
    % Check validity of axis limits
    if str2double(get(handles.edit_xmin,'String')) > str2double(get(handles.edit_xmax,'String'))
        errordlg('Invalid limits for x-axis','Cannot plot');
        return;
    elseif str2double(get(handles.edit_ymin,'String')) > str2double(get(handles.edit_ymax,'String'))
        errordlg('Invalid limits for y-axis','Cannot plot');
        return;
    elseif (str2double(get(handles.edit_xmin,'String')) > max(handles.data.x)) | (str2double(get(handles.edit_xmax,'String')) < min(handles.data.x))
        errordlg('Invalid limits for x-axis: No data points within the specified range', 'Cannot plot');
        return;
    elseif (str2double(get(handles.edit_ymin,'String')) > max(handles.data.y)) | (str2double(get(handles.edit_ymax,'String')) < min(handles.data.y))
        errordlg('Invalid limits for y-axis: No data points within the specified range', 'Cannot plot');
        return;
        % Check nonzero data range
    elseif (max(handles.data.x) - min(handles.data.x)) == 0
        errordlg({'The range of the abscissae in your data is zero. It is impossible'
            'to calculate a line of best fit for data with zero range.'},'Zero range');
        return;
    elseif (max(handles.data.y) - min(handles.data.y)) == 0
        errordlg({'The range of the ordinates in your data is zero. It is impossible'
            'to calculate a line of best fit for data with zero range.'},'Zero range');
        return;
        % Check sensible number of points
    elseif length(handles.data.x) <= get(handles.popupmenu_type,'Value')
        errordlg({'Your data set contains too few points to produce a meaningful graph.'
            'In order to calculate a valid regression line, a data set should'
            'contain at least as many points as (number of fitted parameters + 1).'}, 'Insufficient data');
        return;
    end
    
    handles.fitdata = lsfrfit(handles); % calculate fit
    [handles.fitdata.chisq, handles.fitdata.chierr] = lsfrchi2(handles); % calculate chi-squared
    guidata(gcbf, handles); % update handles structure
    
    % If no problems, plot
    lsfrplot(handles);
end

% --------------------------------------------------------------------
function varargout = pushbutton_exit_Callback(h, eventdata, handles, varargin)
lsfrexit(handles);

% --------------------------------------------------------------------
function varargout = edit_limit_Callback(h, eventdata, handles, varargin)
checklimits(handles,gcbo); % check validity of limit entered

% --------------------------------------------------------------------
function varargout = checkbox_xmin_Callback(h, eventdata, handles, varargin)
stuff = [handles.text_xmin
    handles.edit_xmin]; % set up associated group
if get(gcbo,'Value')
    autolimits(handles) % calculate automatic limits
    toggleenable(stuff, 0); % disable edit boxes
else
    toggleenable(stuff, 1); % enable edit boxes
end

% --------------------------------------------------------------------
function varargout = checkbox_xmax_Callback(h, eventdata, handles, varargin)
stuff = [handles.text_xmax
    handles.edit_xmax]; % set up associated group
if get(gcbo,'Value')
    autolimits(handles) % calculate automatic limits
    toggleenable(stuff, 0); % disable edit boxes
else
    toggleenable(stuff, 1); % enable edit boxes
end

% --------------------------------------------------------------------
function varargout = checkbox_ymin_Callback(h, eventdata, handles, varargin)
stuff = [handles.text_ymin
    handles.edit_ymin]; % set up associated group
if get(gcbo,'Value')
    autolimits(handles) % calculate automatic limits
    toggleenable(stuff, 0); % disable edit boxes
else
    toggleenable(stuff, 1); % enable edit boxes
end

% --------------------------------------------------------------------
function varargout = checkbox_ymax_Callback(h, eventdata, handles, varargin)
stuff = [handles.text_ymax
    handles.edit_ymax]; % set up associated group
if get(gcbo,'Value')
    autolimits(handles) % calculate automatic limits
    toggleenable(stuff, 0); % disable edit boxes
else
    toggleenable(stuff, 1); % enable edit boxes
end

% --------------------------------------------------------------------
function varargout = pushbutton_origin_Callback(h, eventdata, handles, varargin)

if str2double(get(handles.edit_xmax,'String')) < max(handles.data.x)
    set(handles.xmax,'Enable','off');
    set(handles.checkbox_xmax,'Value',1);
end
if str2double(get(handles.edit_xmin,'String')) > min(handles.data.x)
    set(handles.xmin,'Enable','off');
    set(handles.checkbox_xmin,'Value',1);
end
if str2double(get(handles.edit_ymax,'String')) < max(handles.data.y) 
    set(handles.ymax,'Enable','off');
    set(handles.checkbox_ymax,'Value',1);
end
if str2double(get(handles.edit_ymin,'String')) > min(handles.data.y) 
    set(handles.ymin,'Enable','off');
    set(handles.checkbox_ymin,'Value',1);
end
autolimits(handles);
switch h
    case handles.pushbutton_originx
        if str2double(get(handles.edit_xmin,'String')) >= 0
            set(handles.edit_xmin,'String',num2str(floor(0 - 0.05*(max(handles.data.x)-min(handles.data.x)))));
            set(handles.xmin,'Enable','off');
            set(handles.checkbox_xmin,'Value',1);
        end
        if str2double(get(handles.edit_xmax,'String')) <= 0
            set(handles.edit_xmax,'String',num2str(ceil(0 + 0.05*(max(handles.data.x)-min(handles.data.x)))));
            set(handles.xmax,'Enable','off');
            set(handles.checkbox_xmax,'Value',1);
        end
    case handles.pushbutton_originy
        if str2double(get(handles.edit_ymin,'String')) >= 0 
            set(handles.edit_ymin,'String',num2str(floor(0 - 0.05*(max(handles.data.y)-min(handles.data.y)))));
            set(handles.ymin,'Enable','off');
            set(handles.checkbox_ymin,'Value',1);
        end
        if str2double(get(handles.edit_ymax,'String')) <= 0 
            set(handles.edit_ymax,'String',num2str(ceil(0 + 0.05*(max(handles.data.y)-min(handles.data.y)))));
            set(handles.ymax,'Enable','off');
            set(handles.checkbox_ymax,'Value',1);
        end 
end

% --------------------------------------------------------------------
% LSFR Main Functions
%
% The following functions are the main function calls for LSFR6.
% The names of these functions are of the form lsfrXXXX, where XXXX
% is an abbreviation representing the purpose of the function.
% --------------------------------------------------------------------
function data = lsfrload(handles)
% Pops up an 'Open File...' dialog box for the user to select an input
% file containing the data to be analysed. If the file is invalid, a
% warning is given and the load aborted.
% If the file contains 3 valid columns, it is interpreted as
% xvals, yvals, errors
% 
% The file is then loaded into the 'data' structure containing
% three data vectors, representing xvals, yvals and errors.

% Get file details via dialog box
[datafile, datapath] = uigetfile({'*.*','All Files';'*.txt',...
        'Text files';'*.dat','DAT files'}, ...
    'Choose the file containing your data');

% set up standard error message
dataerror = ['The data file should be a plain text file containing ',...
        'three columns of values, representing abscissae, ',...
        'ordinates and error estimates respectively.'];

% load data from the selected file & catch exceptions
try
    data = load([datapath,datafile]);
catch % if there is an error, display an error dialog with details
    msg = errordlg({'Cannot load data from',datafile,'',dataerror,'------------------------------','Details:',lasterr}, 'Error');
    return;
end

% count columns in the data
columns = size(data);
if (columns(2))==3
    xx = data(:,1);
    yy = data(:,2);
    ee = data(:,3);
else
    msg = errordlg({datafile,'is not a valid data file.','',dataerror}, 'Invalid data', 'Replace');
    return;
end

% check that all error estimates are absolute (positive) values
if min(ee) <= 0
    errordlg({'Error loading data:','Error estimates must be entered as nonzero, positive values'},'Error');
    return
end

% update assorted uicontrols...
set(handles.text_filename, 'String', datafile);
set(handles.text_points, 'String', num2str(length(xx)));
set(handles.text_path, 'String', datapath);
for i=1:length(data)
    preview{i} = sprintf('%g\t%g\t%g',data(i,1),data(i,2),data(i,3));
end
set(handles.text_previewpane,'String',preview);

% set working directory
cd(datapath);

% return data vectors in struct
data = struct('x',{xx},'y',{yy},'err',{ee});

% --------------------------------------------------------------------
function fitdata = lsfrfit(handles)
% depending on the type of fit chosen, the appropriate subroutine is
% passed the structure 'data' containing the data vectors, performs
% least-squares regression analysis on the data, and returns a 'fitdata'
% structure containing fitted parameters appropriate for the fit chosen.
format long;

% Polynomial fit - solved via a matrix
if get(handles.popupmenu_type,'Value') > 1 & get(handles.popupmenu_type,'Value') < 5
    [p, p_err] = lsfrpoly(handles,get(handles.popupmenu_type,'Value') - 1);
end

% Linear fit through origin (y=mx)
if get(handles.popupmenu_type,'Value') == 1
    w = handles.data.err.^-2;
    N = length(w);
    wxy_ = sum(w.*handles.data.x.*handles.data.y)/N;
    wx2_ = sum(w.*(handles.data.x.^2))/N;
    p = wxy_/wx2_;
    p_err = sqrt(1/(sum(w.*(handles.data.x.^2))));
    names = 'm';
end

guidata(gcbf, handles); % update handles structure

% Calculate fitline & deviations

linepts = linspace(str2double(get(handles.edit_xmin,'String')),str2double(get(handles.edit_xmax,'String')),500);
switch get(handles.popupmenu_type,'Value')
    case 1 % y=mx
        bestline = p*linepts;
        fx = p*handles.data.x;
        for n=1:length(handles.data.x)
            if fx(n)
                deviations(n) = ((handles.data.y(n)/fx(n))-1) * fx(n);
            else % point at x=0
                deviations(n) = handles.data.y(n) - fx(n);
            end
        end
        deviations = deviations'; % convert to column vector
    case 2 % y=mx+c
        bestline = (p(1)*linepts) + p(2);
        fx = (p(1)*handles.data.x) + p(2);
        deviations = ((handles.data.y./fx)-1) .* fx; % avoids loss of significance
        names = ['m','c'];
    case 3 % y=ax^2+bx+c
        bestline = (p(1)*linepts.^2) + (p(2)*linepts) + p(3);
        fx = (p(1)*handles.data.x.^2) + (p(2)*handles.data.x) + p(3);
        deviations = ((handles.data.y./fx)-1) .* fx; % avoids loss of significance
        names = ['a','b','c'];
    case 4 % y=ax^3+bx^2+cx+d
        bestline = (p(1)*linepts.^3) + (p(2)*linepts.^2) + (p(3)*linepts) + p(4);
        fx = (p(1)*handles.data.x.^3) + (p(2)*handles.data.x.^2) + (p(3)*handles.data.x) + p(4);
        deviations = ((handles.data.y./fx)-1) .* fx; % avoids loss of significance
        names = ['a','b','c','d'];
end

% create fitdata structure
fitdata = struct('p',{p},'p_err',{p_err},'names',{names},'order',{length(p)},'ndf',{length(handles.data.x) - length(p)},'linepts',{linepts},'bestline',{bestline},'deviations',{deviations});

% --------------------------------------------------------------------
function [parameters, errors] = lsfrpoly(handles, m)
% Refined version of polynomial fit, accounting for scaling & false mean.

% Define false means
meanxx = -mean(handles.data.x);
meanyy = -mean(handles.data.y);

% Set up scaled datasets
handles.data.xx = handles.data.x + meanxx;
handles.data.yy = handles.data.y + meanyy;
oomX = floor(log10(max(handles.data.xx) - min(handles.data.xx)));
oomY = floor(log10(max(handles.data.yy) - min(handles.data.yy)));
handles.data.xx = handles.data.xx ./ 10^oomX;
handles.data.yy = handles.data.yy ./ 10^oomY;
err = handles.data.err ./ 10^oomY;

% Populate matrix and vectors with scaled data
w = err.^-2;
for I = 1:m+1
    for J = 1:m+1
        A(I,J) = EwxN(handles.data.xx, w, (2*m)+2-I-J)/length(w);
    end
    B(I) = EwyxN(handles.data.xx, handles.data.yy, w, (m+1-I))/length(w);
    E(:,I) = ((handles.data.xx.^(m+1-I)).*w)/length(w);
end

% Calculate errors
for I = 1:length(w)
F(:,I) = A\E(I,:)';
end
for I = 1:m+1
    G(I) = sum(F(I,:)'.^2.*err.^2);
end

% solve for coefficients
parameters = A\B';
errors = sqrt(G); % errors on coefficients

% restore order of magnitude
for c= 0:m
    parameters(c+1) = parameters(c+1) * 10^(oomX * (c-m)) * 10^(oomY);
    % Following line was missing for five years!!!!
    errors(c+1) = errors(c+1) * 10^(oomX * (c-m)) * 10^(oomY);
end

% add extra factors by binomial expansion of F(x + meanxx)
bin = zeros(m+1,1);
for I = m:-1:1
    for J = 1:I
        bit1 = nchoosek(I,J);
        bit2 = parameters(length(parameters)-I);
        bit3 = meanxx^J;
        bin(J+m+1-I) = bin(J+m+1-I) + (bit1 * bit2 * bit3);
    end
end
parameters(m+1) = parameters(m+1) - meanyy;
parameters = parameters + bin;        


% --------------------------------------------------------------------
function lsfrplot(handles)
% LSFRPLOT creates a plot window, with its properties determined by
% the options set on the main menu. These, together with the data to
% plot, are obtained through the 'handles' structure

% create new figure window
figure;

% determine which plots are required & split window accordingly
mplots = 2 + get(handles.checkbox_deviations,'Value') + get(handles.checkbox_parameters,'Value') ;
if (mplots > 2)
    subplot(mplots/2,1,1);
end

% plot the data
plotwin = errorbar(handles.data.x,handles.data.y,handles.data.err,'k.');

% enable gridlines if required
if (get(handles.checkbox_gridlines,'Value'))
    grid on; 
end;

% set labels
xlabel(get(handles.edit_xlabel,'String'));
ylabel(get(handles.edit_ylabel,'String'));
title(get(handles.edit_title,'String'));
hold on;

% plot calculated regression line
if (handles.fitdata.chierr < 2)
    style = 'b-';
else
    style = 'r:';
end
plot(handles.fitdata.linepts,handles.fitdata.bestline,style);

% set up figure options
set(gcf,'Color','w'); % white background
set(gcf,'PaperType','a4'); % otherwise defaults to 'letter'
set(gcf,'Tag','lsfrfig'); % to keep track of LSFR plots
set(gcf,'Resize','off'); % make plot window non-resizable
if (mplots==4)
    orient tall;
else
    orient landscape;
end
set(gcf,'MenuBar','none'); % hide all menus except custom

% set axis limits
xlim([str2double(get(handles.edit_xmin,'String')) , str2double(get(handles.edit_xmax,'String'))]);
ylim([str2double(get(handles.edit_ymin,'String')) , str2double(get(handles.edit_ymax,'String'))]);
hold off;

% relabel axis ticks if required
if (max(handles.data.x) - min(handles.data.x)) < (mean(handles.data.x) / 1000)
    xticks = get(gca, 'XTick');
    yrange = get(gca, 'YLim');
    set(gca, 'XTick', [str2double(get(handles.edit_xmin,'String')) str2double(get(handles.edit_xmax,'String'))]);
    set(gca, 'XTickLabel', [str2double(get(handles.edit_xmin,'String')) str2double(get(handles.edit_xmax,'String'))]);
    for n=1:(length(xticks)-1)
        xlines(1,:) = xticks(1:length(xticks)-1);
        xlines(2,:) = xticks(1:length(xticks)-1);
    end
    line(xlines, yrange', 'Color', 'k', 'LineStyle', ':');
end

% plot secondary items
if (mplots > 2) 
    if (mplots == 3)
        if (get(handles.checkbox_parameters,'Value'))
            lsfrppar(handles,0,mplots); 
        elseif (get(handles.checkbox_deviations,'Value'))
            subplot(4,1,4);
            lsfrpdev(handles,style);
        end
    elseif (mplots == 4)
        subplot(5,1,5);
        lsfrpdev(handles,style);
        lsfrppar(handles,0.25,mplots);
    end;
    hold off;
end;

% activate custom menu
lsfrmenu(handles);

% --------------------------------------------------------------------
function lsfrpdev(handles,style)
% plots the 'deviations in the ordinates' subplot
nullx= [str2double(get(handles.edit_xmin,'String')),str2double(get(handles.edit_xmax,'String'))];
nully = [0,0];
errorbar(handles.data.x,handles.fitdata.deviations,handles.data.err,'kx'); % plot points
hold on;
plot (nullx,nully,style); % plot 'zero line'
title('Deviations in the ordinates');
xlim([str2double(get(handles.edit_xmin,'String')) , str2double(get(handles.edit_xmax,'String'))]);

% relabel axis ticks if required
if (max(handles.data.x) - min(handles.data.x)) < (mean(handles.data.x) / 1000)
    xticks = get(gca, 'XTick');
    yrange = get(gca, 'YLim');
    set(gca, 'XTick', [str2double(get(handles.edit_xmin,'String')) str2double(get(handles.edit_xmax,'String'))]);
    set(gca, 'XTickLabel', [str2double(get(handles.edit_xmin,'String')) str2double(get(handles.edit_xmax,'String'))]);
    for n=1:(length(xticks)-1)
        xlines(1,:) = xticks(1:length(xticks)-1);
        xlines(2,:) = xticks(1:length(xticks)-1);
    end
    line(xlines, yrange', 'Color', 'k', 'LineStyle', ':');
end

hold off;

% --------------------------------------------------------------------
function lsfrppar(handles,bottom,mpl)
% displays the fitted parameters on the plot window
axes ('position', [0, bottom, 1, 1/mpl], 'visible', 'off');
xlim([0, 1]);
ylim([0, 1]);
% Plot parameters as required...
if(handles.fitdata.chierr < 2) parcol = 'k';
else parcol = 'r';
end
text(0.1, 0.7,0,handles.fitdata.names(1),'Color',parcol); % 1st parameter
text(0.125, 0.7,0,'= ','Color',parcol);
text(0.15, 0.7,0,num2str(handles.fitdata.p(1), '%3.6g'),'Color',parcol);
text(0.325, 0.7,0,'\pm','Color',parcol);
text(0.35, 0.7,0,num2str(handles.fitdata.p_err(1), '%3.3g'),'Color',parcol);
if handles.fitdata.order > 1 % 2nd parameter
    text(0.1, 0.55,0,handles.fitdata.names(2),'Color',parcol);
    text(0.125, 0.55,0,'= ','Color',parcol);
    text(0.15, 0.55,0,num2str(handles.fitdata.p(2), '%3.6g'),'Color',parcol);
    text(0.325, 0.55,0,'\pm','Color',parcol);
    text(0.35, 0.55,0,num2str(handles.fitdata.p_err(2), '%3.3g'),'Color',parcol);
end
if handles.fitdata.order > 2 % 3rd parameter
    text(0.1, 0.4,0,handles.fitdata.names(3),'Color',parcol);
    text(0.125, 0.4,0,'= ','Color',parcol);
    text(0.15, 0.4,0,num2str(handles.fitdata.p(3), '%3.6g'),'Color',parcol);
    text(0.325, 0.4,0,'\pm','Color',parcol);
    text(0.35, 0.4,0,num2str(handles.fitdata.p_err(3), '%3.3g'),'Color',parcol);
end
if handles.fitdata.order > 3 % 4th and final parameter
    text(0.1, 0.25,0,handles.fitdata.names(4),'Color',parcol);
    text(0.125, 0.25,0,'= ','Color',parcol);
    text(0.15, 0.25,0,num2str(handles.fitdata.p(4), '%3.6g'),'Color',parcol);
    text(0.325, 0.25,0,'\pm','Color',parcol);
    text(0.35, 0.25,0,num2str(handles.fitdata.p_err(4), '%3.3g'),'Color',parcol);
end

% plot chisq etc.
if (handles.fitdata.chierr < 2)
    chicol = 'k';
    chiweight = 'normal';
else
    chicol = 'r';
    chiweight = 'bold';
end
list = get(handles.popupmenu_type,'String');
index = get(handles.popupmenu_type,'Value');
text(0.1, 0.9,'Fitted equation:');
text(0.275, 0.9,texlabel(list(index))); % texlabel for correct powers
text(0.6, 0.65,texlabel('chi^(2) =')); % texlabel for correct chi symbol
text(0.65, 0.65, 0, num2str(handles.fitdata.chisq, '%3.4g'), 'Color', chicol, 'FontWeight',chiweight);
text(0.6, 0.50,'Number of points plotted = ');
text(0.875, 0.50,get(handles.text_points,'String'));
text(0.6, 0.35,'Degrees of freedom = ');
text(0.825, 0.35,num2str(handles.fitdata.ndf));
if (handles.fitdata.chierr == 1) % slightly worrying fit
    text(0.8,0.65,0,'<!>','FontWeight','bold'); % indicates caution on window
end
% --------------------------------------------------------------------
function [chisq, chierr] = lsfrchi2(handles)
% calculate chisquared
chi2i=(handles.fitdata.deviations ./ (handles.data.err)) .^2;
chisq=sum(chi2i);

% check validity of calculated value
limits = [... % Matrix of 20% and 5% upper and lower limits for chi-squared
        3.841,  5.991,  7.815,  9.488, 11.070, 12.592, 14.067, 15.507, 16.919, 18.307, ...
        19.675, 21.026, 22.362, 23.685, 24.996, 26.296, 27.587, 28.869, 30.144, 31.410, ...
        32.671, 33.924, 35.172, 36.415, 37.652, 38.885, 40.113, 41.337, 42.557, 43.773; ...
        1.642,  3.219,  4.642,  5.989,  7.289,  8.558,  9.803, 11.030, 12.242, 13.442, ...
        14.631, 15.812, 16.985, 18.151, 19.311, 20.465, 21.615, 22.760, 23.900, 25.038, ...
        26.171, 27.301, 28.429, 29.553, 30.675, 31.795, 32.912, 34.027, 35.139, 36.250; ...
        0.064,  0.446,  1.005,  1.649,  2.343,  3.070,  3.822,  4.594,  5.380,  6.179, ...
        6.989,  7.807,  8.634,  9.467, 10.307, 11.152, 12.002, 12.857, 13.716, 14.578, ...
        15.445, 16.314, 17.187, 18.062, 18.940, 19.820, 20.703, 21.588, 22.475, 23.364; ...
        0.004,  0.103,  0.352,  0.711,  1.145,  1.635,  2.167,  2.733,  3.325,  3.940, ...
        4.575,  5.226,  5.892,  6.571,  7.261,  7.962,  8.672,  9.390, 10.117, 10.851, ...
        11.591, 12.338, 13.091, 13.848, 14.611, 15.379, 16.151, 16.928, 17.708, 18.493];
if handles.fitdata.ndf < 30
    toohigh = limits(1, handles.fitdata.ndf);
    high    = limits(2, handles.fitdata.ndf);
    low     = limits(3, handles.fitdata.ndf);
    toolow  = limits(4, handles.fitdata.ndf);
else % Approximation function for large ndf (lifted from old FIT5.M)
    normal  = [1.64485, 0.84162, -0.84162, -1.64485];
    xx2     = 2/(9*handles.fitdata.ndf);
    xx      = sqrt(xx2);
    xx2     = 1 - xx2;
    toohigh = handles.fitdata.ndf*(xx2 + xx*normal(1))^3;
    high    = handles.fitdata.ndf*(xx2 + xx*normal(2))^3;
    low     = handles.fitdata.ndf*(xx2 + xx*normal(3))^3;
    toolow  = handles.fitdata.ndf*(xx2 + xx*normal(4))^3;
end

% Warning messages (lifted from old FIT5.M)
chismwarn = {'The chi-squared value from the fit is small enough'...
        'to be slightly worrying, but is not strong evidence of an'...
        'error.  If your error estimates are correct, such a value'...
        'has less than 1 chance in 5 of occurring.  Possibly your'...
        'error estimates are too large.  If this is so, then the'...
        'errors on the fitted parameters are also too large.'...
        'If in doubt, consult a demonstrator.'...
        ''...
        ['The 20% limit for chi-squared is ',...
            num2str(low)]};
chismerr = {'The chi-squared value from the fit is suspiciously'...
        'small.  If your error estimates are correct, such a value'...
        'has less than 1 chance in 20 of occurring.  Possibly your'...
        'error estimates are too large.  If this is so, then the'...
        'errors on the fitted parameters are also too large.'...
        'If in doubt, consult a demonstrator.'...
        ''...
        ['The 5% limit for chi-squared is ',...
            num2str(toolow)]};
chilgwarn =  {'The chi-squared value from the fit is large enough'...
        'to be slightly worrying, but is not strong evidence of an'...
        'error.  If your error estimates are correct, such a value'...
        'has less than 1 chance in 5 of occurring.  Possibly your'...
        'error estimates are too small.  If this is so, then the'...
        'errors on the fitted parameters are also too small.'...
        'Alternatively, this particular fit is not appropriate for'...
        'your data.' 'If in doubt, consult a demonstrator.'...
        ''...
        ['The 80% limit for chi-squared is ',...
            num2str(high)]};
chilgerr = {'The chi-squared value from the fit is suspiciously'...
        'large.  If your error estimates are correct, such a value'...
        'has less than 1 chance in 20 of occurring.  Possibly your'...
        'error estimates are too small.  If this is so, then the'...
        'errors on the fitted parameters are also too small.'...
        'Alternatively, this particular fit is not appropriate for'...
        'your data.' 'If in doubt, consult a demonstrator.'...
        ''...
        ['The 95% limit for chi-squared is ',...
            num2str(toohigh)]};

chierr = 0;
if chisq < toolow
    msg = errordlg(chismerr,'Warning');
    chierr = 2;
elseif chisq < low
    msg = warndlg(chismwarn,'Warning');
    chierr = 1;
elseif chisq > toohigh
    msg = errordlg(chilgerr,'Warning');
    chierr = 2;
elseif chisq > high
    msg = warndlg(chilgwarn,'Warning');
    chierr = 1;
end

if (chisq > high) | (chisq < low)
    uiwait(msg) % wait for user to clear dialog box before plotting
end

% --------------------------------------------------------------------
function lsfrmenu(handles)
% Custom uimenu for LSFR-created figure windows
if (findobj(gcf,'Tag','menu_options')) % if a figure with menu exists...
    return; % don't create a duplicate menu
end

h1 = uimenu(...
    'Parent',gcf,...
    'Label','Options',...
    'Tag','menu_options');

h2 = uimenu(...
    'Parent',gcf,...
    'Label','Help',...
    'Callback',[mfilename '(''lsfrhelp'',guidata(gcf),''fig'')'],...
    'Tag','menu_help');

h3 = uimenu(...
    'Parent',h1,...
    'Callback','print -dmeta',...
    'Label','Copy figure',...
    'Tag','menuitem_options_copy');

h4 = uimenu(...
    'Parent',h1,...
    'Label','Save as...',...
    'Callback',[mfilename '(''lsfrsave'')'],...
    'Tag','menuitem_options_save');
if(handles.disablesave)
    set(h4,'Enable','off');
end

h5 = uimenu(...
    'Parent',h1,...
    'Callback','printdlg',...
    'Label','Print...',...
    'Tag','menuitem_options_print');

h6 = uimenu(...
    'Parent',h1,...
    'Callback','pagedlg',...
    'Label','Page Layout...',...
    'Tag','menuitem_options_pagelayout');

h7 = uimenu(...
    'Parent',h1,...
    'Callback','close(gcf)',...
    'Label','Close',...
    'Tag','menuitem_options_close');

% --------------------------------------------------------------------
function lsfrhelp(handles, section);
% displays a help window for the relevant section
scrsz = get(0,'ScreenSize'); % to centre window onscreen

% select correct help text to display
switch section
    case 'main'
        position = [(scrsz(3)-600)/2 (scrsz(4)-440)/2 600 440];
        textbox = [2 5 598 430];
        helptext = {
            '=========================================================================='
            '                             LSFR Main Menu'
            '=========================================================================='
            ''
            'Plot Options'
            '--------------------------------------------------------------------------'
            'Fit type.............................Select the type of fit required.'
            'Show gridlines/subplot/parameters....Show/hide the indicated objects on'
            '                                        the plot window.'
            'Plot title/Axis labels...............Type the labels you wish to appear'
            '                                        on the final plot.'
            'Automatic............................Automatically calculate appropriate'
            '                                        limits. Clear the checkbox to'
            '                                        manually set axis limits.'
            'Show origin..........................Force the axis limits to include'
            '                                        the origin within the range.'
            ''
            'Clear figure windows.................Close all open figure windows.'
            ''
            ''
            ''
            'Data Options'
            '--------------------------------------------------------------------------'
            'Load new data........................Select the file containing your data.'
            ''
            ''
            ''
            'Buttons'
            '--------------------------------------------------------------------------'
            'Plot!................................Plot graph with current options.'
            'Help.................................Display this window.'
            'Exit.................................Exit LSFR.'};
        
    case 'fig'
        position = [(scrsz(3)-600)/2 (scrsz(4)-340)/2 600 350];
        textbox = [2 5 598 340];
        helptext = {
            '=========================================================================='
            '                            LSFR Figure Window'
            '=========================================================================='
            ''
            'Copy figure....Copy the contents of the figure window to the clipboard.'
            ''
            'Save as........Save the contents of the figure window to an image file.'
            '               Formats available:'
            '               - Bitmap image (*.bmp)'
            '               - JPEG Image (*.jpg)'
            '               - Enhanced Metafile (*.emf)'
            '               - PostScript (*.eps)'
            ''
            'Print..........Print the contents of the figure window.'
            ''
            'Page Layout....Change the layout of the page used for printing.'
            ''
            'Close..........Close the figure window.'
            ''
            'Help...........Display this window.'
            ''
            '--------------------------------------------------------------------------'
            'Note: To change the items displayed in the figure window, you should'
            '      change the Plot Options on the main LSFR window before clicking'
            '      on ''Plot!''.'};
end

% delete any existing help windows
helpwin = findall(0,'Tag','lsfrhelp');
delete(helpwin);

% create help window with required text
helpwin = figure(... % Create the window
    'Units','pixels',...
    'Position',position,...
    'IntegerHandle','off',...
    'MenuBar','none',...
    'Name','LSFR Help',...
    'NumberTitle','off',...
    'HandleVisibility','off',...
    'Tag','lsfrhelp');
set(helpwin,'Resize','off'); % this must done separately due to a quirk in MATLAB 6.0

helpinfo = uicontrol(... % Create & fill the text box
    'Style','text',...
    'Parent',helpwin,...
    'FontName','FixedWidth',...
    'FontUnits','points',...
    'FontSize',12,...
    'Units','pixels',...
    'Tag','helptext',...
    'String',helptext,...
    'Position',textbox,...
    'HorizontalAlignment','left');    

% --------------------------------------------------------------------
function lsfrsave(handles);
% Saves a figure window to an image file of the user's choice


% Get filename from save dialog
[imfile, impath, filter] = uiputfile({'*.bmp','Bitmap Image (*.bmp)'; ...
        '*.jpg','JPEG Image (*.jpg)'; ...
        '*.emf','Enhanced Metafile (*.emf)'; ...
        '*.eps','PostScript (*.eps)'}, ...
    'Save As');

switch filter % determine required format
    case 1
        option = '-dbmp256';
    case 2
        option = '-djpeg';
    case 3
        option = '-dmeta';
    case 4
        option = '-depsc';
    otherwise % Save dialog cancelled
        return;
end
print(option, [impath imfile]); % print to file

% --------------------------------------------------------------------
function lsfrinfo(handles)
% Displays an 'About' dialog box

% delete any existing about windows
aboutwin = findall(0,'Tag','lsfrinfo');
delete(aboutwin);

scrsz = get(0,'ScreenSize'); % to centre window onscreen
abouttext = {['LSFR (version ',handles.lsfrver,')']
    ''
    'A Graph Plotting and Data Analysis'
    'package for MATLAB'
    ''
    '(c) Jordan Hulme, Adam Petrus & Ian Duerdoth 2003'
    'Department of Physics & Astronomy'
    'The University of Manchester'
    ''
%    'http://lusifer.blogsite.org'};
    ''};

aboutwin = figure(... % Create the window
    'Units','pixels',...
    'Position',[(scrsz(3)-300)/2 (scrsz(4)-200)/2 300 200],...
    'IntegerHandle','off',...
    'MenuBar','none',...
    'Name','About LSFR',...
    'NumberTitle','off',...
    'HandleVisibility','off',...
    'Tag','lsfrinfo');
set(aboutwin,'Resize','off'); % this must done separately due to a quirk in MATLAB 6.0
aboutinfo = uicontrol(... % Create & fill the text box
    'Style','text',...
    'Parent',aboutwin,...
    'FontUnits','points',...
    'FontSize',8,...
    'HorizontalAlignment','center',...
    'Units','pixels',...
    'Tag','abouttext',...
    'String',abouttext,...
    'Position',[5 5 290 190]);
aboutbtn = uicontrol(...
    'Style','pushbutton',...
    'Parent',aboutwin,...
    'Units','pixels',...
    'Tag','aboutbtn',...
    'String','OK',...
    'Callback','close(gcbf)',...
    'Position',[100 15 100 40]);


% --------------------------------------------------------------------
function lsfrclr
% Clears any LSFR Figure Windows
confirm = questdlg('Clear all figure windows?','Question','Yes','No','Yes');
switch confirm
    case 'Yes'
        figwin = findall(0,'Tag','lsfrfig'); %identify windows
        delete(figwin); % delete
    case 'No'
        return;
end

% --------------------------------------------------------------------
function lsfrexit(handles);
% Confirm and exit LSFR
confirm = questdlg('Are you sure you wish to exit LSFR?','Exit','Yes','No','Yes');
switch confirm
    case 'Yes'
        % Find and close all active LSFR windows
        mainwin = findall(0,'Tag','lsfrmain');
        figwin = findall(0,'Tag','lsfrfig');
        helpwin = findall(0,'Tag','lsfrhelp');
        aboutwin = findall(0,'Tag','lsfrinfo');
        delete(mainwin);
        delete(figwin);
        delete(helpwin);
        delete(aboutwin);
    case 'No'
        return;
end

% --------------------------------------------------------------------
% LSFR Utility Functions
%
% The following functions are subroutines of LSFR6, representing
% tasks that are performed at several points within the main functions.
% --------------------------------------------------------------------
function autolimits(handles)
% Calculates automatic axis limits of +/-5%
% Modified 25/11 to take into account orders of magnitude
if get(handles.checkbox_xmax,'Value')
    extend = 0.05*(max(handles.data.x) - mean(handles.data.x));
    oom = floor(log10(max(handles.data.x) - mean(handles.data.x)));
    roughlim = max(handles.data.x) + extend;
    lim = (ceil(roughlim / 10^oom)) * 10^oom;
    set(handles.edit_xmax,'String',lim);
end
if get(handles.checkbox_xmin,'Value')
    extend = 0.05*(max(handles.data.x) - mean(handles.data.x));
    oom = floor(log10(max(handles.data.x) - mean(handles.data.x)));
    roughlim = min(handles.data.x) - extend;
    lim = (floor(roughlim / 10^oom)) * 10^oom;
    set(handles.edit_xmin,'String',lim);
end
if get(handles.checkbox_ymax,'Value')
    extend = 0.05*(max(handles.data.y) - mean(handles.data.y));
    oom = floor(log10(max(handles.data.y) - mean(handles.data.y)));
    roughlim = max(handles.data.y) + extend;
    lim = (ceil(roughlim / 10^oom)) * 10^oom;
    set(handles.edit_ymax,'String',lim);
end
if get(handles.checkbox_ymin,'Value')
    extend = 0.05*(max(handles.data.y) - mean(handles.data.y));
    oom = floor(log10(max(handles.data.y) - mean(handles.data.y)));
    roughlim = min(handles.data.y) - extend;
    lim = (floor(roughlim / 10^oom)) * 10^oom;
    set(handles.edit_ymin,'String',lim);
end

% --------------------------------------------------------------------
function checklimits(handles,object)
% Checks that axis limits are valid and updates toggles

limiterror=0;
thevalue = str2double(get(object,'String'));
if (thevalue >= 0) | (thevalue <= 0) % is the limit a number?
    switch object
        case handles.edit_xmin
            if (thevalue >= str2double(get(handles.edit_xmax,'String')))
                limiterror=1;
                limerr = 'Minimum value must be less than the maximum value!';
                set(handles.checkbox_xmax,'Value',1);
                set(handles.xmax,'Enable','off');
            end
        case handles.edit_xmax
            if (thevalue <= str2double(get(handles.edit_xmin,'String')))
                limiterror=1;
                limerr = 'Maximum value must be greater than the minimum value!';
                set(handles.checkbox_xmin,'Value',1);
                set(handles.xmin,'Enable','off');
            end
        case handles.edit_ymin
            if (thevalue >= str2double(get(handles.edit_ymax,'String')))
                limiterror=1;
                limerr = 'Minimum value must be less than the maximum value!';
                set(handles.checkbox_ymax,'Value',1);
                set(handles.ymax,'Enable','off');
            end
        case handles.edit_ymax
            if (thevalue <= str2double(get(handles.edit_ymin,'String')))
                limiterror=1;
                limerr = 'Maximum value must be less than the minimum value!';
                set(handles.checkbox_ymin,'Value',1);
                set(handles.ymin,'Enable','off');
            end
    end
else
    limiterror=1;
    limerr = {get(object,'String'), 'is not a valid limit. Limits must be numbers.'};
    switch object
        case handles.edit_xmin
            set(handles.checkbox_xmin,'Value',1);
            set(handles.xmin,'Enable','off');
        case handles.edit_xmax
            set(handles.checkbox_xmax,'Value',1);
            set(handles.xmax,'Enable','off');
        case handles.edit_ymin
            set(handles.checkbox_ymin,'Value',1);
            set(handles.ymin,'Enable','off');
        case handles.edit_ymax
            set(handles.checkbox_ymax,'Value',1);
            set(handles.ymax,'Enable','off');
    end
end
if limiterror % if there is an error, pop up a dialog box to inform the user
    errordlg(limerr,'Error');
    autolimits(handles); % reset invalid limits to sensible values
end

% --------------------------------------------------------------------
function defaults(handles)
% resets all user-configurable values to their defaults
set(handles.edit_title,'String',get(handles.text_filename,'String')); % reset title
set(handles.edit_xlabel,'String','X');
set(handles.edit_ylabel,'String','Y');
set(handles.popupmenu_type,'Value',2); % reset to y=mx+c
group = [handles.checkbox_xmin
    handles.checkbox_xmax
    handles.checkbox_ymin
    handles.checkbox_ymax
    handles.checkbox_gridlines
    handles.checkbox_deviations
    handles.checkbox_parameters];
togglevalue(group,1); % reset checkboxes to defaults
group = [handles.edit_xmin
    handles.edit_xmax
    handles.edit_ymin
    handles.edit_ymax
    handles.text_xmin
    handles.text_xmax
    handles.text_ymin
    handles.text_ymax];
toggleenable(group, 0); % disable limit edit boxes
autolimits(handles); % reset to automatic limits

% --------------------------------------------------------------------
% Generic Utility Functions
%
% These functions are not specific to LSFR; they can equally be
% applied in any MATLAB script using uicontrols. They have been
% created for the sole purpose of simplifying the rest of the code,
% since they represent repetitive simple tasks. They require no
% commenting...
% --------------------------------------------------------------------
function toggleenable(group, option)
switch option
    case 0
        set(group,'Enable','off');
    case 1
        set(group,'Enable','on');
end

% --------------------------------------------------------------------
function togglevalue(group, option)
switch option
    case 0
        set(group,'Value',0);
    case 1
        set(group,'Value',1);
    otherwise
        set(group,'Value',(1 - get(group,'Value')));
end

% --------------------------------------------------------------------
function togglevisibility(group, option)
switch option
    case 0
        set(group,'Visible','off');
    case 1
        set(group,'Visible','on');
end

% --------------------------------------------------------------------
function sum = EwxN(X, W, N)
% Calculates the average value of (w * x^n)
sum = 0;
for I = 1:length(X)
    if (N==0) k = W(I);
    else k = X(I)^N * W(I);
    end

    sum = sum + k;
end

% --------------------------------------------------------------------
function sum = EwyxN(X, Y, W, N)
% Calculates the average value of (w * y * x^n)
sum = 0;
for I = 1:length(X)
    if (N==0) k = W(I) * Y(I);
    else k = X(I)^N * Y(I) * W(I);
    end
    
    sum = sum + k;
end